#lang racket/base

(define append
  (lambda (l1 l2)
    (if (eq? l1 '()) 
        l2
        (cons (car l1) (append (cdr l1) l2)))))

(define reverse
  (lambda (l)
    (if (eq? l '())
        '()
        (append (reverse (cdr l)) (list (car l))))))


(define (duplicate-items lst dup-count)
  (cond ((eq? lst '()) '())
        (else (append (make-list (car dup-count) (car lst))
                      (duplicate-items (cdr lst)
                                       (append (cdr dup-count) (list (car dup-count))))))))

(define (make-list n item)
  (if (<= n 0)
      '()
      (cons item (make-list (- n 1) item))))


; Signature: make-list 
; Type: (Integer Any -> (Listof Any))
; Purpose: Creates a list containing n copies of item.
; Pre-conditions: n >= 0 .
; Tests: (make-list 3 'a) -> '(a a a) (make-list 0 'a) -> '()


